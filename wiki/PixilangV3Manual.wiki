<wiki:toc max_depth="3" />

= What is Pixilang =

Pixilang — cross-platform programming language for graphics/sound applications.

= Basics =

The basis of the Pixilang are containers and variables.

Container is a two-dimensional array of elements. Each element is the number in a specific format. Each container has one format for all its elements. Each container has its own unique ID number.

Variable can contain signed integer (for example 25) of floating point number (for example 33.44).

*The simplest example of the use of containers and variables*
{{{
x = new( 4 ) //Create a new container with 4 pixels. Store its ID into the variable x.
x[ 2 ] = WHITE //Assign the white color to a pixel with number 2.
remove( x ) //Remove this container
}}}
{{{
str = "Hello" //"Hello" is the container with five characters.
//Such containers with strings are created on the stage of compilation of your program. 
//You don't need to delete them manually.
str[ 0 ] = 'h' //Change first character from 'H' to 'h'.
}}}

= Built-in constants =

== Colors ==

 * ORANGE.
 * BLACK.
 * WHITE.
 * YELLOW.
 * RED.
 * GREEN.
 * BLUE.

== Container types ==

 * INT8 - signed integer (8 bit).
 * INT16 - signed integer (16 bit).
 * INT32 - signed integer (32 bit).
 * INT64 - signed integer (64 bit).
 * FLOAT32 - floating point (32 bit).
 * FLOAT64 - floating point (64 bit).
 * DYNAMIC - dynamic type.
 * PIXEL - pixel; will be converted to type INTx, where x - number of bits per pixel.

== Sizes ==

 * INT_SIZE - max size (in bytes) of the signed integer.
 * FLOAT_SIZE - max size (in bytes) of the floating point number.
 * COLORBITS - number of bits per pixel.

== Events ==

 * EVT - number of container with event, which used by get_event() function.
EVT field numbers:
 * EVT_TYPE - event type;
 * EVT_FLAGS - event flags;
 * EVT_TIME - event time;
 * EVT_X;
 * EVT_Y;
 * EVT_KEY;
 * EVT_SCANCODE;
 * EVT_UNICODE.
Event types (for the EVT_TYPE filed):
 * EVT_MOUSEBUTTONDOWN;
 * EVT_MOUSEBUTTONUP;
 * EVT_MOUSEMOVE;
 * EVT_TOUCHBEGIN;
 * EVT_TOUCHEND;
 * EVT_TOUCHMOVE;
 * EVT_BUTTONDOWN;
 * EVT_BUTTONUP;
 * EVT_QUIT.
Constants for the set_quit_action() function:
 * QA_NONE;
 * QA_CLOSE_VM.

== Various ==

 * PIXILANG_VERSION - Pixilang version (major*100000 + minor*100).

== Constants for POSIX compatibility ==

 * FOPEN_MAX.
 * SEEK_CUR.
 * SEEK_END.
 * SEEK_SET.
 * EOF.
 * STDIN.
 * STDOUT.
 * STDERR.

= Built-in global variables =

 * WINDOW_XSIZE - user's window width (in pixels).
 * WINDOW_YSIZE - user's window height (in pixels).

= Built-in functions =

== Work with containers (memory allocation) ==

=== new ===

Create new data container.

*Parameters ( xsize, ysize, type )*
 * xsize - width.
 * ysize - height.
 * type - type of the atomic element of the container. Valid values:
   * INT8 - signed integer (8 bit);
   * INT16 - signed integer (16 bit);
   * INT32 - signed integer (32 bit);
   * INT64 - signed integer (64 bit);
   * FLOAT32 - floating point (32 bit);
   * FLOAT64 - floating point (64 bit);
   * DYNAMIC - dynamic type;
   * PIXEL - pixel; will be converted to type INTx, where x - number of bits per pixel;

*Return value*

Number of the container, or -1 (error).

*Examples*
{{{
p = new() //Create 1x1 container. Element type = pixel.
p = new( 4 ) //Create 4x1 container. Element type = pixel.
p = new( 4, 4 ) //Create 4x4 container. Element type = pixel.
p = new( 4, 4, INT32 ) //Create 4x4 container. Element type = INT32.
}}}

=== remove ===

Remove a container.

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new() //Create new container
remove( p ) //Remove it
}}}

=== resize ===

Resize a container.

*Parameters ( pixi, xsize, ysize, type )*
 * pixi - number of a container.
 * xsize - new width (or -1 if width not changed).
 * ysize - height (or -1 if width not changed).
 * type - type of the atomic element of the container. Valid values:
   * INT8 - signed integer (8 bit);
   * INT16 - signed integer (16 bit);
   * INT32 - signed integer (32 bit);
   * INT64 - signed integer (64 bit);
   * FLOAT32 - floating point (32 bit);
   * FLOAT64 - floating point (64 bit);
   * DYNAMIC - dynamic type;
   * PIXEL - pixel; will be converted to type INTx, where x - number of bits per pixel;

*Examples*
{{{
p = new( 4, 4 ) //Create new container
resize( p, 32, 32 ) //Resize it from 4x4 to 32x1
resize( p, -1, 64 ) //Resize it from 32x32 to 32x64
remove( p ) //Remove
}}}

=== clean ===

Clean a container (fill with zeroes).

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new() //Create new container
clean( p ) //Clean
remove( p ) //Remove
}}}

=== get_size ===

Get size of a container (number of elements).

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8 ) //Create new container 8x8
size = get_size( p ) //Save its size to the "size" variable
remove( p )
}}}

=== get_xsize ===

Get width of a container.

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8 ) //Create new container 8x8
xsize = get_xsize( p ) //Save its width to the "xsize" variable
remove( p )
}}}

=== get_ysize ===

Get height of a container.

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8 ) //Create new container 8x8
ysize = get_xsize( p ) //Save its height to the "ysize" variable
remove( p )
}}}

=== get_esize ===

Get the size of the element of a container (in bytes).

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8, INT32 ) //Create new container 8x8; element type = INT32
esize = get_esize( p ) //Save its element's size to the "esize" variable
//Now esize = 4.
remove( p )
}}}

=== get_type ===

Get the type of the element of a container

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8, FLOAT32 ) //Create new container 8x8; element type = FLOAT32
type = get_type( p ) //Save its element's type to the "type" variable
//Now type = FLOAT32.
remove( p )
}}}

== Graphics ==

=== frame ===

Draw current screen on display and delay for selected number of milliseconds.

*Parameters ( delay )*
 * delay - pause length in milliseconds.

=== set_screen ===

Set current screen.

*Параметры ( pixi )*
 * pixi - container with image, which will be the screen.

=== get_screen ===

Get current screen.

*Return value*

Container's number.

=== get_color ===

Get color by r,g,b (red,green,blue).

*Parameters ( red, green, blue )*
 * red - red intensity (from 0 до 255);
 * green - green intensity (from 0 до 255);
 * blue - blue intensity (from 0 до 255).

*Return value*

Color.

=== get_red ===

Get red component intensity in a selected color.

*Parameters ( color )*
 * color.

*Return value*

Red component intensity. From 0 to 255.

=== get_green ===

Get green component intensity in a selected color.

*Parameters ( color )*
 * color.

*Return value*

Green component intensity. From 0 to 255.

=== get_blue ===

Get blue component intensity in a selected color.

*Parameters ( color )*
 * color.

*Return value*

Blue component intensity. From 0 to 255.

=== get_blend ===

Get an intermediate color value between two selected colors.

*Parameters ( c1, c2, v )*
 * c1 - first color;
 * с2 - second color;
 * v - position between c1 and c2; 0 - closer to c1; 255 - closer to c2.

*Return value*

Intermediate color.

=== transp ===

Set transparency.

*Parameters ( t )*
 * t - transparency from 0 to 255.

=== clear ===

Clear current screen.

*Parameters ( color )*
 * color.

=== dot ===

Draw a dot.

*Parameters ( x, y, color )*
 * x;
 * y;
 * color.

=== dot3d ===

=== get_dot ===

Get a dot's color.

*Parameters ( x, y )*
 * x;
 * y.

*Return value*

Color.

=== line ===

=== line3d ===

=== rect ===

=== frect ===

== Transformation ==

=== t_reset ===

=== t_rotate ===

=== t_translate ===

=== t_scale ===

=== t_get_matrix ===

=== t_set_matrix ===

=== t_mul_matrix ===

=== t_point ===

== Time ==

=== start_timer ===

=== get_timer ===

=== get_hours ===

=== get_minutes ===

=== get_seconds ===

== Events ==

=== get_event ===

Get a new event from the system.

*Return value*

0 - no events. 1 - event is received and placed into a container EVT.

=== set_quit_action ===

Set the program's behavior when receiving event EVT_QUIT.

*Parameters ( action )*
 * action - action number.

Possible values for the action parameter:
 * QA_NONE - do nothing;
 * QA_CLOSE_VM (default) - close the current virtual machine, but don't quit from Pixilang.

== System functions (compatibility with POSIX) ==

=== fopen ===

=== fclose ===

=== fputc ===

=== fputs ===

=== fwrite ===

=== fgetc ===

=== fgets ===

=== fread ===

=== feof ===

=== fflush ===

=== fseek ===

=== ftell ===

=== remove_file ===

=== rename_file ===

=== system ===

=== argc ===

=== argv ===

=== exit ===

Quit from Pixilang.