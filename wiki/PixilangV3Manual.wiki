<wiki:toc max_depth="3" />

= What is Pixilang =

Pixilang â€” cross-platform programming language for graphics/sound applications.

= Basics =

The basis of the Pixilang are containers and variables.

Container is a two-dimensional array of elements. Each element is the number in a specific format. Each container has one format for all its elements. Each container has its own unique ID number.

Variable can contain signed integer (for example 25) of floating point number (for example 33.44).

*The simplest example of the use of containers and variables*
{{{
x = new( 4 ) //Create a new container with 4 pixels. Store its ID in variable x.
x[ 2 ] = WHITE //Assign the white color to a pixel with number 2.
}}}

= Built-in constants =

== Colors ==

 * ORANGE.
 * BLACK.
 * WHITE.
 * YELLOW.
 * RED.
 * GREEN.
 * BLUE.

== Container types ==

 * INT8 - signed integer (8 bit);
 * INT16 - signed integer (16 bit);
 * INT32 - signed integer (32 bit);
 * INT64 - signed integer (64 bit);
 * FLOAT32 - floating point (32 bit);
 * FLOAT64 - floating point (64 bit);
 * DYNAMIC - dynamic type;
 * PIXEL - pixel; will be converted to type INTx, where x - number of bits per pixel;

== Sizes ==

 * INT_SIZE - max size (in bytes) of the signed integer.
 * FLOAT_SIZE - max size (in bytes) of the floating point number.
 * COLORBITS - number of bits per pixel.

== Constants for POSIX compatibility ==

 * FOPEN_MAX.
 * SEEK_CUR.
 * SEEK_END.
 * SEEK_SET.
 * EOF.
 * STDIN.
 * STDOUT.
 * STDERR.

= Built-in functions =

== Work with containers (memory allocation) ==

=== new ===

Create new data container.

*Parameters ( xsize, ysize, type )*
 * xsize - width.
 * ysize - height.
 * type - type of the atomic element of the container. Valid values:
   * INT8 - signed integer (8 bit);
   * INT16 - signed integer (16 bit);
   * INT32 - signed integer (32 bit);
   * INT64 - signed integer (64 bit);
   * FLOAT32 - floating point (32 bit);
   * FLOAT64 - floating point (64 bit);
   * DYNAMIC - dynamic type;
   * PIXEL - pixel; will be converted to type INTx, where x - number of bits per pixel;

*Return value*

Number of the container, or -1 (error).

*Examples*
{{{
p = new() //Create 1x1 container. Element type = pixel.
p = new( 4 ) //Create 4x1 container. Element type = pixel.
p = new( 4, 4 ) //Create 4x4 container. Element type = pixel.
p = new( 4, 4, INT32 ) //Create 4x4 container. Element type = INT32.
}}}

=== remove ===

Remove a container.

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new() //Create new container
remove( p ) //Remove it
}}}

=== resize ===

Resize a container.

*Parameters ( pixi, xsize, ysize, type )*
 * pixi - number of a container.
 * xsize - new width (or -1 if width not changed).
 * ysize - height (or -1 if width not changed).
 * type - type of the atomic element of the container. Valid values:
   * INT8 - signed integer (8 bit);
   * INT16 - signed integer (16 bit);
   * INT32 - signed integer (32 bit);
   * INT64 - signed integer (64 bit);
   * FLOAT32 - floating point (32 bit);
   * FLOAT64 - floating point (64 bit);
   * DYNAMIC - dynamic type;
   * PIXEL - pixel; will be converted to type INTx, where x - number of bits per pixel;

*Examples*
{{{
p = new( 4, 4 ) //Create new container
resize( p, 32, 32 ) //Resize it from 4x4 to 32x1
resize( p, -1, 64 ) //Resize it from 32x32 to 32x64
remove( p ) //Remove
}}}

=== clean ===

Clean a container (fill with zeroes).

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new() //Create new container
clean( p ) //Clean
remove( p ) //Remove
}}}

=== get_size ===

Get size of a container (number of elements).

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8 ) //Create new container 8x8
size = get_size( p ) //Save its size to the "size" variable
remove( p )
}}}

=== get_xsize ===

Get width of a container.

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8 ) //Create new container 8x8
xsize = get_xsize( p ) //Save its width to the "xsize" variable
remove( p )
}}}

=== get_ysize ===

Get height of a container.

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8 ) //Create new container 8x8
ysize = get_xsize( p ) //Save its height to the "ysize" variable
remove( p )
}}}

=== get_esize ===

Get the size of the element of a container (in bytes).

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8, INT32 ) //Create new container 8x8; element type = INT32
esize = get_esize( p ) //Save its element's size to the "esize" variable
//Now esize = 4.
remove( p )
}}}

=== get_type ===

Get the type of the element of a container

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8, FLOAT32 ) //Create new container 8x8; element type = FLOAT32
type = get_type( p ) //Save its element's type to the "type" variable
//Now type = FLOAT32.
remove( p )
}}}

== System functions (compatibility with POSIX) ==

=== fopen ===

=== fclose ===

=== fputc ===

=== fwrite ===

=== fgetc ===

=== fread ===

=== feof ===

=== fflush ===

=== fseek ===

=== ftell ===

=== remove_file ===

=== rename_file ===

=== system ===