<wiki:toc max_depth="3" />

= What is Pixilang =

Pixilang — cross-platform programming language for graphic/sound applications.

= Basics =

The basis of the Pixilang - are containers and variables.

Container is a two-dimensional array of elements. Each element is the number in a specific format. Each container has one format for all its elements. Each container has its own unique ID number.

Variable can contain signed integer (for example 25) of floating point number (for example 33.44).

*The simplest example of the use of containers and variables*
{{{
x = new( 4 ) //Create a new container with 4 pixels. Store its ID into the variable x.
x[ 2 ] = WHITE //Assign the white color to a pixel with number 2.
remove( x ) //Remove this container
}}}
{{{
str = "Hello" //"Hello" is the container with five characters.
//Such containers with strings are created on the stage of compilation of your program. 
//You don't need to delete them manually.
str[ 0 ] = 'h' //Change first character from 'H' to 'h'.
}}}

= Built-in operators =

{{{
//if, else
if a == b 
  { /*This code is executed if a equals b*/ }
else
  { /*This code is executed otherwise*/ }
if x == 4 && y == 2 
  { /*This code is executed if x equals 4 and y equals 2*/ }

//while
a = 0
while( a < 3 )
{
  //This code is executed while a less than 3
  a + 3
}

//go, goto
m1:
a + 1
goto m1 //Go to the m1 label

//halt, stop
halt //Stop the program here

//include
include "prog2.txt" //Include code from prog2.txt

//fn
fn fff( $x, $y ) //Declare function fff with parameters $x and $y
{
  //Function fff body
  ret //Simple return from the function
  ret( 4 ) //Return with value 4
}
}}}

The following table lists the mathematical operators. Priority 0 - the highest, such operations will be executed in the first place.
|| Priority || Operator || Description || Result || Example || 
|| 0 || % || Modulo (remainder) || Integer || a = b % 4 ||
|| 0 || / || Division || Floating point || a = b / 4 ||
|| 0 || div || Integer division || Integer || a = b div 4 ||
|| 0 || `*` || Multiplication || Depends on the operands || a = b `*` 4 ||
|| 1 || + || Addition || Depends on the operands || a = b + 4 ||
|| 1 || - || Subtraction || Depends on the operands || a = b - 4 ||
|| 2 || >> || Bitwise right shift || Integer || a = b >> 4 ||
|| 2 || << || Bitwise left shift || Integer || a = b << 4 ||
|| 3 || == || Equal to || Integer 1 or 0 || if a == b {} ||
|| 3 || != || Not equal to || Integer 1 or 0 || if a != b {} ||
|| 3 || < || Less than || Integer 1 or 0 || if a < b {} ||
|| 3 || > || Greater than || Integer 1 or 0 || if a > b {} ||
|| 3 || <= || Less than or equal to || Integer 1 or 0 || if a <= b {} ||
|| 3 || >= || Greater than or equal to || Integer 1 or 0 || if a >= b {} ||
|| 4 || | || Bitwise OR || Integer || a = b | 4 ||
|| 4 || ^ || Bitwise XOR || Integer || a = b ^ 4 ||
|| 4 || & || Bitwise AND || Integer || a = b & 4 ||
|| 5 ||  `|``|` || Logical OR || Integer 1 or 0 || if a `|``|` b {} ||
|| 5 || && || Logical AND || Integer 1 or 0 || if a && b {} ||

= Built-in constants =

== Colors ==

 * ORANGE.
 * BLACK.
 * WHITE.
 * YELLOW.
 * RED.
 * GREEN.
 * BLUE.

== Container types ==

 * INT - signed integer (size depends on the version of Pixilang).
 * INT8 - signed integer (8 bit).
 * INT16 - signed integer (16 bit).
 * INT32 - signed integer (32 bit).
 * INT64 - signed integer (64 bit).
 * FLOAT - floating point (size depends on the version of Pixilang).
 * FLOAT32 - floating point (32 bit).
 * FLOAT64 - floating point (64 bit).
 * DYNAMIC - dynamic type.
 * PIXEL - pixel; will be converted to type INTx, where x - number of bits per pixel.

== Sizes ==

 * INT_SIZE - max size (in bytes) of the signed integer.
 * FLOAT_SIZE - max size (in bytes) of the floating point number.
 * COLORBITS - number of bits per pixel.

== Events ==

 * EVT - number of container with event, which used by get_event() function.
EVT field numbers:
 * EVT_TYPE - event type;
 * EVT_FLAGS - event flags;
 * EVT_TIME - event time;
 * EVT_X;
 * EVT_Y;
 * EVT_KEY;
 * EVT_SCANCODE;
 * EVT_UNICODE.
Event types (for the EVT_TYPE filed):
 * EVT_MOUSEBUTTONDOWN;
 * EVT_MOUSEBUTTONUP;
 * EVT_MOUSEMOVE;
 * EVT_TOUCHBEGIN;
 * EVT_TOUCHEND;
 * EVT_TOUCHMOVE;
 * EVT_BUTTONDOWN;
 * EVT_BUTTONUP;
 * EVT_QUIT.
Constants for the set_quit_action() function:
 * QA_NONE;
 * QA_CLOSE_VM.

== Mathematical ==

 * M_E - e.
 * M_LOG2E - log,,2,,e.
 * M_LOG10E - log,,10,,e.
 * M_LN2 - log,,e,,2.
 * M_LN10 - log,,e,,10.
 * M_PI - PI.
 * M_2_SQRTPI - 2 / sqrt( PI ).
 * M_SQRT2 - sqrt( 2 ).
 * M_SQRT1_2 - 1 / sqrt( 2 ).

== Constants for POSIX compatibility ==

 * FOPEN_MAX.
 * SEEK_CUR.
 * SEEK_END.
 * SEEK_SET.
 * EOF.
 * STDIN.
 * STDOUT.
 * STDERR.

== Various ==

 * PIXILANG_VERSION - Pixilang version (major*100000 + minor*100).

= Built-in global variables =

 * WINDOW_XSIZE - user's window width (in pixels).
 * WINDOW_YSIZE - user's window height (in pixels).

= Built-in functions =

== Work with containers (memory allocation) ==

=== new ===

Create new data container.

Note: immediately after its creation, the container may contain some random values. You should clean it up or fill it with useful data.

*Parameters ( xsize, ysize, type )*
 * xsize - width.
 * ysize - height.
 * type - type of the atomic element of the container. Valid values:
   * INT - signed integer (size depends on the version of Pixilang);
   * INT8 - signed integer (8 bit);
   * INT16 - signed integer (16 bit);
   * INT32 - signed integer (32 bit);
   * INT64 - signed integer (64 bit);
   * FLOAT - floating point (size depends on the version of Pixilang);
   * FLOAT32 - floating point (32 bit);
   * FLOAT64 - floating point (64 bit);
   * DYNAMIC - dynamic type;
   * PIXEL - pixel; will be converted to type INTx, where x - number of bits per pixel;

*Return value*

Number of the container, or -1 (error).

*Examples*
{{{
p = new() //Create 1x1 container. Element type = pixel.
p = new( 4 ) //Create 4x1 container. Element type = pixel.
p = new( 4, 4 ) //Create 4x4 container. Element type = pixel.
p = new( 4, 4, INT32 ) //Create 4x4 container. Element type = INT32.
}}}

=== remove ===

Remove a container.

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new() //Create new container
remove( p ) //Remove it
}}}

=== resize ===

Resize a container.

*Parameters ( pixi, xsize, ysize, type )*
 * pixi - number of a container.
 * xsize - new width (or -1 if width not changed).
 * ysize - height (or -1 if width not changed).
 * type - type of the atomic element of the container. Valid values:
   * INT8 - signed integer (8 bit);
   * INT16 - signed integer (16 bit);
   * INT32 - signed integer (32 bit);
   * INT64 - signed integer (64 bit);
   * FLOAT32 - floating point (32 bit);
   * FLOAT64 - floating point (64 bit);
   * DYNAMIC - dynamic type;
   * PIXEL - pixel; will be converted to type INTx, where x - number of bits per pixel;

*Return value*

0 - successful; 1 - error.

*Examples*
{{{
p = new( 4, 4 ) //Create new container
resize( p, 32, 32 ) //Resize it from 4x4 to 32x1
resize( p, -1, 64 ) //Resize it from 32x32 to 32x64
remove( p ) //Remove
}}}

=== clean ===

Clean a container (fill with zeroes or with selected values).

*Parameters ( pixi, v )*
 * pixi - number of a container;
 * v - value.

*Examples*
{{{
p = new() //Create new container
clean( p ) //Clean
remove( p ) //Remove
}}}

=== clone ===

Make a duplicate of the container.

*Parameters ( pixi )*
 * pixi - number of a container.

*Return value*

Number of the new container, or -1 (error).

=== get_size ===

Get size of a container (number of elements).

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8 ) //Create new container 8x8
size = get_size( p ) //Save its size to the "size" variable
remove( p )
}}}

=== get_xsize ===

Get width of a container.

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8 ) //Create new container 8x8
xsize = get_xsize( p ) //Save its width to the "xsize" variable
remove( p )
}}}

=== get_ysize ===

Get height of a container.

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8 ) //Create new container 8x8
ysize = get_xsize( p ) //Save its height to the "ysize" variable
remove( p )
}}}

=== get_esize ===

Get the size of the element of a container (in bytes).

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8, INT32 ) //Create new container 8x8; element type = INT32
esize = get_esize( p ) //Save its element's size to the "esize" variable
//Now esize = 4.
remove( p )
}}}

=== get_type ===

Get the type of the element of a container

*Parameters ( pixi )*
 * pixi - number of a container.

*Examples*
{{{
p = new( 8, 8, FLOAT32 ) //Create new container 8x8; element type = FLOAT32
type = get_type( p ) //Save its element's type to the "type" variable
//Now type = FLOAT32.
remove( p )
}}}

== File formats ==

=== load ===

== Graphics ==

=== frame ===

Draw current screen on display and delay for selected number of milliseconds.

*Parameters ( delay )*
 * delay - pause length in milliseconds.

=== set_screen ===

Set current screen.

*Параметры ( pixi )*
 * pixi - container with image, which will be the screen.

=== get_screen ===

Get current screen.

*Return value*

Container's number.

=== set_zbuf ===

=== get_zbuf ===

=== get_color ===

Get color by r,g,b (red,green,blue).

*Parameters ( red, green, blue )*
 * red - red intensity (from 0 до 255);
 * green - green intensity (from 0 до 255);
 * blue - blue intensity (from 0 до 255).

*Return value*

Color.

=== get_red ===

Get red component intensity in a selected color.

*Parameters ( color )*
 * color.

*Return value*

Red component intensity. From 0 to 255.

=== get_green ===

Get green component intensity in a selected color.

*Parameters ( color )*
 * color.

*Return value*

Green component intensity. From 0 to 255.

=== get_blue ===

Get blue component intensity in a selected color.

*Parameters ( color )*
 * color.

*Return value*

Blue component intensity. From 0 to 255.

=== get_blend ===

Get an intermediate color value between two selected colors.

*Parameters ( c1, c2, v )*
 * c1 - first color;
 * с2 - second color;
 * v - position between c1 and c2; 0 - closer to c1; 255 - closer to c2.

*Return value*

Intermediate color.

=== transp ===

Set transparency.

*Parameters ( t )*
 * t - transparency from 0 to 255.

=== clear ===

Clear current screen.

*Parameters ( color )*
 * color.

=== dot ===

Draw a dot.

*Parameters ( x, y, color )*
 * x;
 * y;
 * color.

=== dot3d ===

=== get_dot ===

Get a dot's color.

*Parameters ( x, y )*
 * x;
 * y.

*Return value*

Color.

=== get_dot3d ===

=== line ===

=== line3d ===

=== box ===

=== fbox ===

=== pixi === 

Display the container with the picture. 

* Parameters ( pixi, x, y, color, xscale, yscale ) * 
 * pixi - container number; 
 * x; 
 * y;
 * color - color of the filter; optional; default value is WHITE;
 * xscale - scaling factor (x axis); optional; default value is 1;
 * yscale - scaling factor (y axis); optional; default value is 1.

=== set_key_color === 

Set / reset the color of transparency in the container. 

* Parameters (pixi, color) * 
 * pixi - container number; 
 * color - color to be transparent; ignore this parameter if you want to disable transparent color for this container.

=== get_key_color ===

=== set_alpha === 

Attach a container with alpha channel to another container. Alpha channel should be of type INT8. 

* Parameters (pixi, alpha) * 
 * pixi - container number; 
 * alpha - container with alpha channel; ignore this parameter if you want to disable alpha-channel for the pixi container.

=== get_alpha ===

== Transformation ==

=== t_reset ===

=== t_rotate ===

=== t_translate ===

=== t_scale ===

=== t_get_matrix ===

=== t_set_matrix ===

=== t_mul_matrix ===

=== t_point ===

== Time ==

=== start_timer ===

=== get_timer ===

=== get_hours ===

=== get_minutes ===

=== get_seconds ===

== Events ==

=== get_event ===

Get a new event from the system.

*Return value*

0 - no events. 1 - event is received and placed into a container EVT.

=== set_quit_action ===

Set the program's behavior when receiving event EVT_QUIT.

*Parameters ( action )*
 * action - action number.

Possible values for the action parameter:
 * QA_NONE - do nothing;
 * QA_CLOSE_VM (default) - close the current virtual machine, but don't quit from Pixilang.

== Mathematical ==

=== acos ===
=== acosh ===
=== asin ===
=== asinh ===
=== atan ===
=== atanh ===
=== ceil ===
=== cos ===
=== cosh ===
=== exp ===
=== exp2 ===
=== expm1 ===
=== abs ===
=== floor ===
=== mod ===
=== log ===
=== log2 ===
=== log10 ===
=== pow ===
=== sin ===
=== sinh ===
=== sqrt ===
=== tan ===
=== tanh ===
=== rand ===
=== rand_seed ===

== System functions (compatibility with POSIX) ==

=== fopen ===

The fopen() function shall open the file whose pathname is the string pointed to by _filename_, and associates a stream with it.

*Parameters ( filename, mode )*
 * filename;
 * mode:
   * r or rb - open file for reading;
   * w or wb - truncate to zero length or create file for writing;
   * a or ab - append; open or create file for writing at end-of-file;
   * r+ or rb+ or r+b - open file for update (reading and writing);
   * w+ or wb+ or w+b - truncate to zero length or create file for update;
   * a+ or ab+ or a+b - append; open or create file for update, writing at end-of-file.

*Return value*

Upon successful completion, fopen() shall return ID of the object controlling the stream. Otherwise, 0 shall be returned.

*Examples*
{{{
f = fopen( "/tmp/data.txt", "rb" ) //Open file data.txt for reading
fclose( f ) //...and close it.
}}}

=== fclose ===

The fclose() function shall cause the stream to be flushed and the associated file to be closed.

*Parameters ( stream )*

*Return value*

Upon successful completion, fclose() shall return 0.

*Examples*
{{{
f = fopen( "/tmp/data.txt", "rb" ) //Open file data.txt for reading.
c = fgetc( f ) //Get a byte from this file.
fclose( f ) //Close the stream.
}}}

=== fputc ===

Put a byte on a stream.

*Parameters ( c, stream )*

*Examples*
{{{
f = fopen( "/tmp/data.txt", "wb" ) //Open file data.txt for writing.
fputc( 0x12, f ) //Put a byte 0x12 to this file.
fclose( f ) //Close the stream.
}}}

=== fputs ===

Put a string on a stream.

*Parameters ( s, stream )*

*Examples*
{{{
f = fopen( "/tmp/data.txt", "wb" ) //Open file data.txt for writing.
str = "Hello!"
fputc( str, f ) //Put a string "Hello!" to this file.
fclose( f ) //Close the stream.
}}}

=== fwrite ===

The fwrite() function shall write, from the container _data_, up to _size_ bytes, to the stream pointed to by _stream_.

*Parameters ( data, size, stream )*

*Return value*

The fwrite() function shall return the number of bytes successfully written, which may be less than _size_ if a write error is encountered.

*Examples*
{{{
f = fopen( "/tmp/data.txt", "wb" ) //Open file data.txt for writing.
str = "Hello!"
fwrite( str, 2, f ) //Put first two bytes from the string "Hello!" to this file.
fclose( f ) //Close the stream.
}}}

=== fgetc ===

Get a byte from a stream.

*Parameters ( stream )*

*Return value*

Upon successful completion, fgetc() shall return the next byte from the input stream pointed to by _stream_.

=== fgets ===

Get a string from a stream.

*Parameters ( s, n, stream )*

*Examples*
{{{
string = new( 256, 1, INT8 )
f = fopen( "/tmp/data.txt", "rb" ) //Open file data.txt for reading.
fgets( string, 256, f ) //Get a string from this file.
fclose( f ) //Close the stream.
}}}

=== fread ===

The fread() function shall read into the container pointed to by _data_ up to _size_ bytes, from the stream pointed to by _stream_.

*Parameters ( data, size, stream )*

*Return value*

Upon successful completion, fread() shall return the number of bytes successfully read which is less than _size_ only if a read error or end-of-file is encountered.

=== feof ===

Test end-of-file indicator on a stream.

*Parameters ( stream )*

*Return value*

The feof() function shall return non-zero if and only if the end-of-file indicator is set for _stream_.

=== fflush ===

Flush a stream.

*Parameters ( stream )*

=== fseek ===

Reposition a file-position indicator in a stream.

*Parameters ( stream, offset, origin )*
 * stream;
 * offset;
 * origin:
   * SEEK_SET - beginning of file;
   * SEEK_CUR - current position of the file pointer;
   * SEEK_END - end of file.

=== ftell ===

Return a file offset in a stream.

*Parameters ( stream )*

*Return value*

Upon successful completion, ftell() shall return the current value of the file-position indicator for the stream measured in bytes from the beginning of the file.

*Examples*
{{{
//One of the ways to get the file size:
f = fopen( "/tmp/data.txt", "rb" )
fseek( f, 0, SEEK_END )
size_of_file = ftell( f )
fclose( f )
}}}

=== remove_file ===

*Parameters ( filename )*

=== rename_file ===

*Parameters ( old_filename, new_filename )*

=== strcat ===

Appends a copy of the source string to the destination string. Both strings can be with terminating null character or without it (if the size of the container = number of characters in the string). Size of the source string can be changed after this function executes.

*Parameters ( destination, source )*

=== strcmp ===

Compares the string str1 to the string str2. Both strings can be with terminating null character or without it (if the size of the container = number of characters in the string).

*Parameters ( str1, str2 )*

*Return value*

A zero value indicates that both strings are equal. 
A value greater than zero indicates that the first character that does not match has a greater value in str1 than in str2; And a value less than zero indicates the opposite.

=== strlen ===

Returns the length of string str. String can be with terminating null character or without it (if the size of the container = number of characters in the string).

*Parameters ( str )*

*Return value*

Length of string str.

=== strstr ===

Returns the offset of the first occurrence of str2 in str1, or a -1 if str2 is not part of str1.

*Parameters ( str1, str2 )*

*Return value*

Offset of the first occurrence of str2 in str1, or a -1 if str2 is not part of str1.

=== system ===

Issue a OS command.

*Parameters ( command )*

*Return value*

system() shall return the termination status of the command.

*Examples*
{{{
//Remove some file:
system( "rm /tmp/data.txt" )
}}}

=== argc ===

Returns the number of arguments.

=== argv ===

Returns the container with selected argument.

*Parameters ( n )*

*Examples*
{{{
if argc >= 4 
{
  a = argv( 3 )
  remove( a )
}
}}}

=== exit ===

Quit from Pixilang.

*Examples*
{{{
exit( 4 ) //Exit with code 4
}}}